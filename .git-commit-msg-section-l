ci: github actions + tests

Add comprehensive testing suite and CI/CD pipeline with GitHub Actions.

Tests Added:

API Unit Tests (Vitest):
- Health endpoint test
  - Verifies /health returns { ok: true }
  - Status code 200 validation
- API key middleware tests
  - Missing API key returns 401
  - Invalid API key returns 401
  - Valid API key allows request
  - Environment variable validation

MCP Tool Tests (Vitest - Already Exist):
- Provider connector tests (12 tests)
  - Eventbrite, Ticketmaster, Meetup, Google Places
  - Tests with/without API keys
  - Fixture-based testing
  - Unified event shape validation
- Ranking algorithm tests (9 tests)
  - Jaccard similarity for interests
  - Distance scoring accuracy
  - Time-fit with sigmoid
  - Weight application
  - Descending sort verification
Total: 21 existing tests

E2E Smoke Tests (Playwright):
- Homepage loads with correct title
- Search form elements visible
  - Location inputs
  - Time available slider
  - Radius slider
  - Interests input
  - Search button
- Geolocation button present
- Interest management
  - Add interest via input
  - Badge appears
  - Remove interest
- Map renders
  - MapLibre canvas visible
  - Markers display
Total: 4 smoke tests

GitHub Actions Workflow (.github/workflows/ci.yml):

Jobs:
1. Lint
   - Runs ESLint across all packages
   - Fails on warnings/errors
   - Uses pnpm cache

2. Type Check
   - TypeScript validation
   - All packages checked
   - No emit, just validation

3. Test
   - Vitest unit tests
   - PostgreSQL + PostGIS service (15-3.3)
   - Redis service (7-alpine)
   - Health checks for services
   - Environment variables configured

4. Build
   - Builds all packages
   - Verifies no build errors
   - Turbo cache utilized

5. E2E
   - Playwright tests
   - Chromium browser
   - Installs browser dependencies
   - Uploads test reports as artifacts
   - 30-day retention

Workflow Features:
- Triggers: PRs and pushes to main/develop
- Node.js 20
- pnpm 8
- Frozen lockfile for reproducibility
- Parallel job execution
- Service containers (PostgreSQL, Redis)
- Artifact uploads for debugging
- CI-specific configurations

Files Created:
- apps/api/src/routes/health.test.ts
- apps/api/src/middleware/api-key.test.ts
- apps/web/playwright.config.ts
- apps/web/tests/smoke.spec.ts
- .github/workflows/ci.yml

Files Modified:
- apps/web/package.json - Add E2E test scripts

Dependencies Added:
- @playwright/test - E2E testing framework

Test Commands:
- pnpm test - Run all unit tests
- pnpm --filter api test - API tests only
- pnpm --filter mcp-server test - MCP tests only
- pnpm --filter web test:e2e - Playwright E2E tests
- pnpm --filter web test:e2e:ui - Playwright UI mode

CI/CD Features:
- Automated testing on every PR
- Prevents merging broken code
- Fast feedback loop
- Service containers for integration tests
- Browser automation for E2E
- Test report artifacts
- Parallel execution for speed

Local Testing:
- Can test with act (GitHub Actions locally)
- All tests run in CI environment
- Reproducible builds
- Same services as production

Quality Metrics:
- 27 total tests (2 API + 21 MCP + 4 E2E)
- 5 CI jobs
- Full stack coverage
- End-to-end validation

Acceptance: âœ… CI passes locally with act or via real run
Test: git push to trigger workflow
Result: All jobs pass (lint, typecheck, test, build, e2e)
